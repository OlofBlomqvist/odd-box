/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogsImport } from './routes/logs'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const NewSiteLazyImport = createFileRoute('/new-site')()
const IndexLazyImport = createFileRoute('/')()
const SiteSiteNameLazyImport = createFileRoute('/site/$siteName')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const NewSiteLazyRoute = NewSiteLazyImport.update({
  path: '/new-site',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/new-site.lazy').then((d) => d.Route))

const LogsRoute = LogsImport.update({
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SiteSiteNameLazyRoute = SiteSiteNameLazyImport.update({
  path: '/site/$siteName',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/site.$siteName.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsImport
      parentRoute: typeof rootRoute
    }
    '/new-site': {
      id: '/new-site'
      path: '/new-site'
      fullPath: '/new-site'
      preLoaderRoute: typeof NewSiteLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/site/$siteName': {
      id: '/site/$siteName'
      path: '/site/$siteName'
      fullPath: '/site/$siteName'
      preLoaderRoute: typeof SiteSiteNameLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LogsRoute,
  NewSiteLazyRoute,
  SettingsLazyRoute,
  SiteSiteNameLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/logs",
        "/new-site",
        "/settings",
        "/site/$siteName"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/logs": {
      "filePath": "logs.tsx"
    },
    "/new-site": {
      "filePath": "new-site.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/site/$siteName": {
      "filePath": "site.$siteName.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
